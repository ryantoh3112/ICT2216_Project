<!-- Chatbot Widget -->
<div id="chat-container" style="position: fixed; bottom: 20px; right: 20px; width: 320px; box-shadow: 0 4px 12px rgba(0,0,0,.15); border-radius: 8px; background-color: white; z-index: 999;">
    <div style="background-color: #0d6efd; color: white; padding: 10px; border-top-left-radius: 8px; border-top-right-radius: 8px; font-weight: bold; display: flex; justify-content: space-between; align-items: center;">
        <span>ü§ñ Ask GoTix AI</span>
        <button id="chat-toggle-btn" style="background: none; border: none; color: white; font-size: 1.2rem; cursor: pointer;">√ó</button>
    </div>
    <div id="chat-body">
        <div id="chat-log" style="height: 200px; overflow-y: auto; padding: 10px; font-size: 0.9rem; color: #555;">
            <div style="color: #999; font-style: italic;">Hi there! Ask me anything about GoTix.</div>
        </div>
        <form id="chat-form" style="display: flex; border-top: 1px solid #ddd;">
            <input id="chat-input" type="text" style="flex: 1; border: none; padding: 6px; outline: none; font-size: 0.9rem; border-bottom-left-radius: 8px;"
                placeholder="Ask something..." autocomplete="off">
            <button type="submit" style="border-bottom-right-radius: 8px; border: none; background-color: #ffc233; color: #000; padding: 6px 12px; font-size: 0.9rem;">
                Send
            </button>
        </form>
    </div>
</div>
<button id="chat-open-btn" style="display: none; position: fixed; bottom: 20px; right: 20px; background-color: #0d6efd; color: white; border: none; border-radius: 50%; width: 48px; height: 48px; font-size: 1.2rem; box-shadow: 0 4px 12px rgba(0,0,0,.15); z-index: 1000; cursor: pointer;">
  üí¨
</button>

<script>
document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('chat-form');
    const input = document.getElementById('chat-input');
    const log = document.getElementById('chat-log');

    // for hiding the chatbot widget
    const toggleBtn = document.getElementById('chat-toggle-btn');
    const chatContainer = document.getElementById('chat-container');
    const chatBody = document.getElementById('chat-body');
    const openBtn = document.getElementById('chat-open-btn');

    const HISTORY = [
        {
            role: 'system',
            content: `You are the GoTix AI assistant. Keep each answer to 1‚Äì2 sentences.

Examples:
Q: What is this site?
A: GoTix is a secure event-booking platform for tickets.

Now answer the user‚Äôs question briefly.`
        }
    ];

    function timeTag() {
        const now = new Date();
        return now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    }

    form.addEventListener('submit', async e => {
        e.preventDefault();
        const msg = input.value.trim();
        if (!msg) return;

        HISTORY.push({ role: 'user', content: msg });

        log.innerHTML += `
            <div style="margin-bottom: 8px; text-align: right;">
                <div style="display: inline-block; background-color: #0d6efd; color: white; padding: 6px 10px; border-radius: 8px; max-width: 85%; word-break: break-word;">${msg}</div>
                <div style="font-size: 0.7rem; color: #999; margin-top: 2px;">${timeTag()}</div>
            </div>`;
        input.value = '';
        log.scrollTop = log.scrollHeight;

        try {
            const res = await fetch('/api/chat', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ messages: HISTORY })
            });
            const data = await res.json();
            const reply = data.reply || 'Service is temporarily unavailable. Please try again later.';

            HISTORY.push({ role: 'assistant', content: reply });

            log.innerHTML += `
                <div style="margin-bottom: 8px; text-align: left;">
                    <div style="display: inline-block; background-color: #e9ecef; color: #333; padding: 6px 10px; border-radius: 8px; max-width: 85%; word-break: break-word;">${reply}</div>
                    <div style="font-size: 0.7rem; color: #999; margin-top: 2px;">${timeTag()}</div>
                </div>`;
            log.scrollTop = log.scrollHeight;
        } catch (err) {
            console.error(err);
            log.innerHTML += `
                <div style="color: #dc3545; font-size: 0.8rem; margin-bottom: 8px;">
                    ‚ö†Ô∏è Connection error ${timeTag()}
                </div>`;
            log.scrollTop = log.scrollHeight;
        }
    });

    // === 1. Load stored visibility state ===
    const isChatHidden = localStorage.getItem('chatbot-hidden') === 'true';
    if (isChatHidden) {
        chatContainer.style.display = 'none';
        openBtn.style.display = 'block';
    } else {
        chatContainer.style.display = 'block';
        openBtn.style.display = 'none';
    }

    // === 2. Toggle to hide the chat ===
    toggleBtn.addEventListener('click', () => {
        chatContainer.style.display = 'none';
        openBtn.style.display = 'block';
        localStorage.setItem('chatbot-hidden', 'true');
    });

    // === 3. Toggle to show the chat ===
    openBtn.addEventListener('click', () => {
        chatContainer.style.display = 'block';
        openBtn.style.display = 'none';
        localStorage.setItem('chatbot-hidden', 'false');
    });
});
</script>
